"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_media_1 = require("./vg-media");
var vg_api_1 = require("../services/vg-api");
var vg_states_1 = require("../states/vg-states");
describe('Videogular Media', function () {
    var media;
    var ref;
    var cdRef;
    var api;
    var elem = {
        play: function () { },
        pause: function () { },
        load: function () { },
        duration: 100,
        currentTime: 0,
        volume: 1,
        playbackRate: 1,
        buffered: {
            length: 2,
            end: function () { return 50; }
        },
        id: 'testVideo',
        observe: function () {
            return {};
        },
        dispatchEvent: function () { }
    };
    beforeEach(function () {
        ref = {
            nativeElement: elem
        };
        cdRef = {
            detectChanges: function () { },
            markForCheck: function () { },
            detach: function () { },
            reattach: function () { },
            checkNoChanges: function () { }
        };
        api = new vg_api_1.VgAPI();
        media = new vg_media_1.VgMedia(api, cdRef);
        media.vgMedia = elem;
    });
    it('Should load a new media if a change on dom have been happened', function () {
        jasmine.clock().install();
        spyOn(elem, 'load').and.callThrough();
        spyOn(elem, 'pause').and.callThrough();
        media.onMutation([
            {
                type: 'attributes',
                attributeName: 'src',
                target: {
                    src: 'my-new-file.mp4'
                }
            }
        ]);
        jasmine.clock().tick(10);
        expect(elem.load).toHaveBeenCalled();
        expect(elem.pause).toHaveBeenCalled();
        expect(elem.currentTime).toBe(0);
        jasmine.clock().uninstall();
    });
    it('Should not be master by default', function () {
        expect(media.vgMaster).toBeFalsy();
    });
    it('Should have a play method', function () {
        spyOn(elem, 'play');
        media.play();
        expect(elem.play).toHaveBeenCalled();
    });
    it('Should have a pause method', function () {
        spyOn(elem, 'pause');
        media.pause();
        expect(elem.pause).toHaveBeenCalled();
    });
    it('Should have setter/getter props', function () {
        expect(media.duration).toBe(100);
        expect(media.currentTime).toBe(0);
        expect(media.volume).toBe(1);
        expect(media.playbackRate).toBe(1);
        expect(media.buffered.length).toEqual(2);
        media.currentTime = 50;
        media.volume = 0.5;
        media.playbackRate = 0.5;
        expect(elem.currentTime).toBe(50);
        expect(elem.volume).toBe(0.5);
        expect(elem.playbackRate).toBe(0.5);
    });
    it('Should handle onCanPlay native event', function () {
        expect(media.canPlay).toBeFalsy();
        media.onCanPlay({});
        expect(media.canPlay).toBeTruthy();
    });
    it('Should handle onCanPlayThrough native event', function () {
        expect(media.canPlayThrough).toBeFalsy();
        media.onCanPlayThrough({});
        expect(media.canPlayThrough).toBeTruthy();
    });
    it('Should handle onLoadMetadata native event', function () {
        expect(media.isMetadataLoaded).toBeFalsy();
        media.onLoadMetadata({});
        expect(media.isMetadataLoaded).toBeTruthy();
        expect(media.time.total).toBe(100000);
    });
    it('Should handle onWait native event', function () {
        expect(media.isWaiting).toBeFalsy();
        media.onWait({});
        expect(media.isWaiting).toBeTruthy();
    });
    it('Should handle onComplete native event', function () {
        expect(media.isCompleted).toBeFalsy();
        media.state = vg_states_1.VgStates.VG_PLAYING;
        media.onComplete({});
        expect(media.isCompleted).toBeTruthy();
        expect(media.state).toBe(vg_states_1.VgStates.VG_ENDED);
    });
    it('Should handle onStartPlaying native event', function () {
        expect(media.state).toBe(vg_states_1.VgStates.VG_PAUSED);
        media.onStartPlaying({});
        expect(media.state).toBe(vg_states_1.VgStates.VG_PLAYING);
    });
    it('Should handle onPlay native event', function () {
        expect(media.state).toBe(vg_states_1.VgStates.VG_PAUSED);
        media.onPlay({});
        expect(media.state).toBe(vg_states_1.VgStates.VG_PLAYING);
    });
    it('Should handle onPause native event', function () {
        media.state = vg_states_1.VgStates.VG_PLAYING;
        media.onPause({});
        expect(media.state).toBe(vg_states_1.VgStates.VG_PAUSED);
    });
    it('Should handle onTimeUpdate native event (with buffer)', function () {
        elem.currentTime = 25;
        media.onTimeUpdate({});
        expect(media.time.current).toBe(25000);
        expect(media.time.left).toBe(75000);
        expect(media.buffer.end).toBe(50000);
    });
    it('Should handle onTimeUpdate native event (without buffer)', function () {
        elem.currentTime = 25;
        elem.buffered = {
            length: 0,
            end: function () { return 0; }
        };
        media.onTimeUpdate({});
        expect(media.time.current).toBe(25000);
        expect(media.time.left).toBe(75000);
        expect(media.buffer.end).toBe(0);
        elem.buffered = {
            length: 2,
            end: function () { return 50; }
        };
    });
    it('Should handle onProgress native event (with buffer)', function () {
        media.onProgress({});
        expect(media.buffer.end).toBe(50000);
    });
    it('Should handle onProgress native event (without buffer)', function () {
        elem.buffered = {
            length: 0,
            end: function () { return 0; }
        };
        media.onProgress({});
        expect(media.buffer.end).toBe(0);
        elem.buffered = {
            length: 2,
            end: function () { return 50; }
        };
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctbWVkaWEuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZnLW1lZGlhLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBbUM7QUFDbkMsNkNBQXlDO0FBRXpDLGlEQUE2QztBQUc3QyxRQUFRLENBQUMsa0JBQWtCLEVBQUU7SUFDekIsSUFBSSxLQUFhLENBQUM7SUFDbEIsSUFBSSxHQUFjLENBQUM7SUFDbkIsSUFBSSxLQUF1QixDQUFDO0lBQzVCLElBQUksR0FBUyxDQUFDO0lBQ2QsSUFBSSxJQUFJLEdBQUc7UUFDUCxJQUFJLEVBQUUsZUFBUTtRQUNkLEtBQUssRUFBRSxlQUFRO1FBQ2YsSUFBSSxFQUFFLGVBQVE7UUFDZCxRQUFRLEVBQUUsR0FBRztRQUNiLFdBQVcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxFQUFFLENBQUM7UUFDVCxZQUFZLEVBQUUsQ0FBQztRQUNmLFFBQVEsRUFBRTtZQUNOLE1BQU0sRUFBRSxDQUFDO1lBQ1QsR0FBRyxFQUFFLGNBQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1NBQzFCO1FBQ0QsRUFBRSxFQUFFLFdBQVc7UUFDZixPQUFPLEVBQUU7WUFDTCxNQUFNLENBQU0sRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsYUFBYSxFQUFFLGVBQVE7S0FDMUIsQ0FBQztJQUVGLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRSxJQUFJO1NBQ3RCLENBQUM7UUFDRixLQUFLLEdBQUc7WUFDSixhQUFhLEVBQUUsZUFBUTtZQUN2QixZQUFZLEVBQUUsZUFBUTtZQUN0QixNQUFNLEVBQUUsZUFBUTtZQUNoQixRQUFRLEVBQUUsZUFBUTtZQUNsQixjQUFjLEVBQUUsZUFBUTtTQUMzQixDQUFDO1FBQ0YsR0FBRyxHQUFHLElBQUksY0FBSyxFQUFFLENBQUM7UUFDbEIsS0FBSyxHQUFHLElBQUksa0JBQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEMsS0FBSyxD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QUFNLEVBQUUsQ0FBQztZQUNULEdBQUcsRUFBRSxjQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQztTQUMxQixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFO1FBQ3RELEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3REFBd0QsRUFBRTtRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ1osTUFBTSxFQUFFLENBQUM7WUFDVCxHQUFHLEVBQUUsY0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUM7U0FDekIsQ0FBQztRQUVGLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxRQUFRLEdBQUc7WUFDWixNQUFNLEVBQUUsQ0FBQztZQUNULEdBQUcsRUFBRSxjQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQztTQUMxQixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0NBQ04sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZ01lZGlhfSBmcm9tIFwiLi92Zy1tZWRpYVwiO1xuaW1wb3J0IHtWZ0FQSX0gZnJvbSBcIi4uL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7VmdTdGF0ZXN9IGZyb20gXCIuLi9zdGF0ZXMvdmctc3RhdGVzXCI7XG5cblxuZGVzY3JpYmUoJ1ZpZGVvZ3VsYXIgTWVkaWEnLCAoKSA9PiB7XG4gICAgbGV0IG1lZGlhOlZnTWVkaWE7XG4gICAgbGV0IHJlZjpFbGVtZW50UmVmO1xuICAgIGxldCBjZFJlZjpDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBsZXQgYXBpOlZnQVBJO1xuICAgIGxldCBlbGVtID0ge1xuICAgICAgICBwbGF5OiAoKSA9PiB7fSxcbiAgICAgICAgcGF1c2U6ICgpID0+IHt9LFxuICAgICAgICBsb2FkOiAoKSA9PiB7fSxcbiAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgY3VycmVudFRpbWU6IDAsXG4gICAgICAgIHZvbHVtZTogMSxcbiAgICAgICAgcGxheWJhY2tSYXRlOiAxLFxuICAgICAgICBidWZmZXJlZDoge1xuICAgICAgICAgICAgbGVuZ3RoOiAyLFxuICAgICAgICAgICAgZW5kOiAoKSA9PiB7cmV0dXJuIDUwO31cbiAgICAgICAgfSxcbiAgICAgICAgaWQ6ICd0ZXN0VmlkZW8nLFxuICAgICAgICBvYnNlcnZlOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPGFueT57fTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogKCkgPT4ge31cbiAgICB9O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlZiA9IHtcbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQ6IGVsZW1cbiAgICAgICAgfTtcbiAgICAgICAgY2RSZWYgPSB7XG4gICAgICAgICAgICBkZXRlY3RDaGFuZ2VzOiAoKSA9PiB7fSxcbiAgICAgICAgICAgIG1hcmtGb3JDaGVjazogKCkgPT4ge30sXG4gICAgICAgICAgICBkZXRhY2g6ICgpID0+IHt9LFxuICAgICAgICAgICAgcmVhdHRhY2g6ICgpID0+IHt9LFxuICAgICAgICAgICAgY2hlY2tOb0NoYW5nZXM6ICgpID0+IHt9XG4gICAgICAgIH07XG4gICAgICAgIGFwaSA9IG5ldyBWZ0FQSSgpO1xuICAgICAgICBtZWRpYSA9IG5ldyBWZ01lZGlhKGFwaSwgY2RSZWYpO1xuICAgICAgICBtZWRpYS52Z01lZGlhID0gZWxlbTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgbG9hZCBhIG5ldyBtZWRpYSBpZiBhIGNoYW5nZSBvbiBkb20gaGF2ZSBiZWVuIGhhcHBlbmVkJywgKCkgPT4ge1xuICAgICAgICBqYXNtaW5lLmNsb2NrKCkuaW5zdGFsbCgpO1xuXG4gICAgICAgIHNweU9uKGVsZW0sICdsb2FkJykuYW5kLmNhbGxUaHJvdWdoKCk7XG4gICAgICAgIHNweU9uKGVsZW0sICdwYXVzZScpLmFuZC5jYWxsVGhyb3VnaCgpO1xuXG4gICAgICAgIG1lZGlhLm9uTXV0YXRpb24oW1xuICAgICAgICAgICAgPGFueT57XG4gICAgICAgICAgICAgICAgdHlwZTogJ2F0dHJpYnV0ZXMnLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdzcmMnLFxuICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICBzcmM6ICdteS1uZXctZmlsZS5tcDQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudGljaygxMCk7XG5cbiAgICAgICAgZXhwZWN0KGVsZW0ubG9hZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QoZWxlbS5wYXVzZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QoZWxlbS5jdXJyZW50VGltZSkudG9CZSgwKTtcblxuICAgICAgICBqYXNtaW5lLmNsb2NrKCkudW5pbnN0YWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIG5vdCBiZSBtYXN0ZXIgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1lZGlhLnZnTWFzdGVyKS50b0JlRmFsc3koKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGF2ZSBhIHBsYXkgbWV0aG9kJywgKCkgPT4ge1xuICAgICAgICBzcHlPbihlbGVtLCAncGxheScpO1xuXG4gICAgICAgIG1lZGlhLnBsYXkoKTtcblxuICAgICAgICBleHBlY3QoZWxlbS5wbGF5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhhdmUgYSBwYXVzZSBtZXRob2QnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGVsZW0sICdwYXVzZScpO1xuXG4gICAgICAgIG1lZGlhLnBhdXNlKCk7XG5cbiAgICAgICAgZXhwZWN0KGVsZW0ucGF1c2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGF2ZSBzZXR0ZXIvZ2V0dGVyIHByb3BzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuZHVyYXRpb24pLnRvQmUoMTAwKTtcbiAgICAgICAgZXhwZWN0KG1lZGlhLmN1cnJlbnRUaW1lKS50b0JlKDApO1xuICAgICAgICBleHBlY3QobWVkaWEudm9sdW1lKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QobWVkaWEucGxheWJhY2tSYXRlKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QobWVkaWEuYnVmZmVyZWQubGVuZ3RoKS50b0VxdWFsKDIpO1xuXG4gICAgICAgIG1lZGlhLmN1cnJlbnRUaW1lID0gNTA7XG4gICAgICAgIG1lZGlhLnZvbHVtZSA9IDAuNTtcbiAgICAgICAgbWVkaWEucGxheWJhY2tSYXRlID0gMC41O1xuXG4gICAgICAgIGV4cGVjdChlbGVtLmN1cnJlbnRUaW1lKS50b0JlKDUwKTtcbiAgICAgICAgZXhwZWN0KGVsZW0udm9sdW1lKS50b0JlKDAuNSk7XG4gICAgICAgIGV4cGVjdChlbGVtLnBsYXliYWNrUmF0ZSkudG9CZSgwLjUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25DYW5QbGF5IG5hdGl2ZSBldmVudCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KG1lZGlhLmNhblBsYXkpLnRvQmVGYWxzeSgpO1xuXG4gICAgICAgIG1lZGlhLm9uQ2FuUGxheSh7fSk7XG5cbiAgICAgICAgZXhwZWN0KG1lZGlhLmNhblBsYXkpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGFuZGxlIG9uQ2FuUGxheVRocm91Z2ggbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuY2FuUGxheVRocm91Z2gpLnRvQmVGYWxzeSgpO1xuXG4gICAgICAgIG1lZGlhLm9uQ2FuUGxheVRocm91Z2goe30pO1xuXG4gICAgICAgIGV4cGVjdChtZWRpYS5jYW5QbGF5VGhyb3VnaCkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25Mb2FkTWV0YWRhdGEgbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuaXNNZXRhZGF0YUxvYWRlZCkudG9CZUZhbHN5KCk7XG5cbiAgICAgICAgbWVkaWEub25Mb2FkTWV0YWRhdGEoe30pO1xuXG4gICAgICAgIGV4cGVjdChtZWRpYS5pc01ldGFkYXRhTG9hZGVkKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChtZWRpYS50aW1lLnRvdGFsKS50b0JlKDEwMDAwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhhbmRsZSBvbldhaXQgbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuaXNXYWl0aW5nKS50b0JlRmFsc3koKTtcblxuICAgICAgICBtZWRpYS5vbldhaXQoe30pO1xuXG4gICAgICAgIGV4cGVjdChtZWRpYS5pc1dhaXRpbmcpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGFuZGxlIG9uQ29tcGxldGUgbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuaXNDb21wbGV0ZWQpLnRvQmVGYWxzeSgpO1xuXG4gICAgICAgIG1lZGlhLnN0YXRlID0gVmdTdGF0ZXMuVkdfUExBWUlORztcbiAgICAgICAgbWVkaWEub25Db21wbGV0ZSh7fSk7XG5cbiAgICAgICAgZXhwZWN0KG1lZGlhLmlzQ29tcGxldGVkKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChtZWRpYS5zdGF0ZSkudG9CZShWZ1N0YXRlcy5WR19FTkRFRCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhhbmRsZSBvblN0YXJ0UGxheWluZyBuYXRpdmUgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtZWRpYS5zdGF0ZSkudG9CZShWZ1N0YXRlcy5WR19QQVVTRUQpO1xuXG4gICAgICAgIG1lZGlhLm9uU3RhcnRQbGF5aW5nKHt9KTtcblxuICAgICAgICBleHBlY3QobWVkaWEuc3RhdGUpLnRvQmUoVmdTdGF0ZXMuVkdfUExBWUlORyk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhhbmRsZSBvblBsYXkgbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobWVkaWEuc3RhdGUpLnRvQmUoVmdTdGF0ZXMuVkdfUEFVU0VEKTtcblxuICAgICAgICBtZWRpYS5vblBsYXkoe30pO1xuXG4gICAgICAgIGV4cGVjdChtZWRpYS5zdGF0ZSkudG9CZShWZ1N0YXRlcy5WR19QTEFZSU5HKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGFuZGxlIG9uUGF1c2UgbmF0aXZlIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBtZWRpYS5zdGF0ZSA9IFZnU3RhdGVzLlZHX1BMQVlJTkc7XG5cbiAgICAgICAgbWVkaWEub25QYXVzZSh7fSk7XG5cbiAgICAgICAgZXhwZWN0KG1lZGlhLnN0YXRlKS50b0JlKFZnU3RhdGVzLlZHX1BBVVNFRCk7XG4gICAgfSk7XG5cbiAgICBpdCgnU2hvdWxkIGhhbmRsZSBvblRpbWVVcGRhdGUgbmF0aXZlIGV2ZW50ICh3aXRoIGJ1ZmZlciknLCAoKSA9PiB7XG4gICAgICAgIGVsZW0uY3VycmVudFRpbWUgPSAyNTtcblxuICAgICAgICBtZWRpYS5vblRpbWVVcGRhdGUoe30pO1xuXG4gICAgICAgIGV4cGVjdChtZWRpYS50aW1lLmN1cnJlbnQpLnRvQmUoMjUwMDApO1xuICAgICAgICBleHBlY3QobWVkaWEudGltZS5sZWZ0KS50b0JlKDc1MDAwKTtcbiAgICAgICAgZXhwZWN0KG1lZGlhLmJ1ZmZlci5lbmQpLnRvQmUoNTAwMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25UaW1lVXBkYXRlIG5hdGl2ZSBldmVudCAod2l0aG91dCBidWZmZXIpJywgKCkgPT4ge1xuICAgICAgICBlbGVtLmN1cnJlbnRUaW1lID0gMjU7XG4gICAgICAgIGVsZW0uYnVmZmVyZWQgPSB7XG4gICAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgICBlbmQ6ICgpID0+IHtyZXR1cm4gMDt9XG4gICAgICAgIH07XG5cbiAgICAgICAgbWVkaWEub25UaW1lVXBkYXRlKHt9KTtcblxuICAgICAgICBleHBlY3QobWVkaWEudGltZS5jdXJyZW50KS50b0JlKDI1MDAwKTtcbiAgICAgICAgZXhwZWN0KG1lZGlhLnRpbWUubGVmdCkudG9CZSg3NTAwMCk7XG4gICAgICAgIGV4cGVjdChtZWRpYS5idWZmZXIuZW5kKS50b0JlKDApO1xuXG4gICAgICAgIGVsZW0uYnVmZmVyZWQgPSB7XG4gICAgICAgICAgICBsZW5ndGg6IDIsXG4gICAgICAgICAgICBlbmQ6ICgpID0+IHtyZXR1cm4gNTA7fVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25Qcm9ncmVzcyBuYXRpdmUgZXZlbnQgKHdpdGggYnVmZmVyKScsICgpID0+IHtcbiAgICAgICAgbWVkaWEub25Qcm9ncmVzcyh7fSk7XG5cbiAgICAgICAgZXhwZWN0KG1lZGlhLmJ1ZmZlci5lbmQpLnRvQmUoNTAwMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25Qcm9ncmVzcyBuYXRpdmUgZXZlbnQgKHdpdGhvdXQgYnVmZmVyKScsICgpID0+IHtcbiAgICAgICAgZWxlbS5idWZmZXJlZCA9IHtcbiAgICAgICAgICAgIGxlbmd0aDogMCxcbiAgICAgICAgICAgIGVuZDogKCkgPT4ge3JldHVybiAwO31cbiAgICAgICAgfTtcblxuICAgICAgICBtZWRpYS5vblByb2dyZXNzKHt9KTtcblxuICAgICAgICBleHBlY3QobWVkaWEuYnVmZmVyLmVuZCkudG9CZSgwKTtcblxuICAgICAgICBlbGVtLmJ1ZmZlcmVkID0ge1xuICAgICAgICAgICAgbGVuZ3RoOiAyLFxuICAgICAgICAgICAgZW5kOiAoKSA9PiB7cmV0dXJuIDUwO31cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pO1xuIl19