"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_scrub_bar_1 = require("./vg-scrub-bar");
var vg_api_1 = require("../../core/services/vg-api");
var vg_controls_hidden_1 = require("./../../core/services/vg-controls-hidden");
var vg_media_1 = require("../../core/vg-media/vg-media");
var vg_states_1 = require("../../core/states/vg-states");
describe('Scrub bar', function () {
    var scrubBar;
    var ref;
    var cdRef;
    var api;
    var vgControlsHiddenState;
    var media;
    var elem = {
        play: function () { },
        pause: function () { },
        load: function () { },
        duration: 100,
        currentTime: 0,
        volume: 1,
        playbackRate: 1,
        buffered: {
            length: 2,
            end: function () { return 50; }
        },
        id: 'testVideo',
        observe: function () {
            return {};
        },
        dispatchEvent: function () { }
    };
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                },
                scrollWidth: 200
            }
        };
        cdRef = {
            detectChanges: function () { },
            markForCheck: function () { },
            detach: function () { },
            reattach: function () { },
            checkNoChanges: function () { }
        };
        api = new vg_api_1.VgAPI();
        media = new vg_media_1.VgMedia(api, cdRef);
        media.vgMedia = elem;
        vgControlsHiddenState = new vg_controls_hidden_1.VgControlsHidden();
        scrubBar = new vg_scrub_bar_1.VgScrubBar(ref, api, vgControlsHiddenState);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById');
        scrubBar.vgFor = 'test';
        scrubBar.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
    });
    it('Should show scrub bar', function () {
        vgControlsHiddenState.state(false);
        expect(scrubBar.hideScrubBar).toBe(false);
    });
    it('Should hide scrub bar', function () {
        vgControlsHiddenState.state(true);
        expect(scrubBar.hideScrubBar).toBe(true);
    });
    describe('onMouseDownScrubBar', function () {
        it('should call API seekTime 10 when offsetX is 20 and scrollWidth is 200', function () {
            api = {
                seekTime: function () { },
                pause: function () { },
                registerMedia: function () { },
                state: vg_states_1.VgStates.VG_PLAYING,
                isLive: false,
                canPlay: true
            };
            spyOn(api, 'pause');
            media.onCanPlay({});
            api.registerMedia(media);
            scrubBar.target = api;
            scrubBar.target.canPlay = true;
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onMouseDownScrubBar({ offsetX: 20 });
            expect(api.pause).toHaveBeenCalled();
        });
    });
    describe('onMouseMoveScrubBar', function () {
        it('should modify time.current to 10 when offsetX is 20 and scrollWidth is 200 and vgSlider is true and isSeeking is true', function () {
            spyOn(api, 'seekTime');
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onMouseMoveScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onMouseMoveScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledWith(10, true);
        });
    });
    describe('onMouseOutScrubBar', function () {
        it('should modify time.current to 10 when offsetX is 20 and scrollWidth is 200 and vgSlider is true and isSeeking is true', function () {
            spyOn(api, 'seekTime');
            media.onCanPlay({});
            api.registerMedia(media);
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onMouseOutScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onMouseOutScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledWith(10, true);
        });
    });
    describe('onMouseUpScrubBar', function () {
        it('should modify time.current to 10 when offsetX is 20 and scrollWidth is 200 and vgSlider is true and isSeeking is true', function () {
            spyOn(api, 'seekTime');
            media.onCanPlay({});
            api.registerMedia(media);
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onMouseUpScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onMouseUpScrubBar({ offsetX: 20 });
            expect(api.seekTime).toHaveBeenCalledWith(10, true);
        });
    });
    describe('onTouchStartScrubBar', function () {
        it('should call API seekTime 10 when offsetX is 20 and scrollWidth is 200', function () {
            spyOn(api, 'seekTime');
            spyOn(api, 'pause');
            media.onCanPlay({});
            api.registerMedia(media);
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onTouchStartScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledWith(10, true);
            expect(api.pause).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onTouchStartScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(1);
            expect(api.pause).toHaveBeenCalledTimes(1);
        });
    });
    describe('onTouchMoveScrubBar', function () {
        it('should modify time.current to 10 when offsetX is 20 and scrollWidth is 200 and vgSlider is true and isSeeking is true', function () {
            spyOn(api, 'seekTime');
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onTouchMoveScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onTouchMoveScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledWith(10, true);
        });
    });
    describe('onTouchCancelScrubBar', function () {
        it('should not seek', function () {
            spyOn(api, 'seekTime');
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onTouchCancelScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onTouchCancelScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
        });
    });
    describe('onTouchEndScrubBar', function () {
        it('should not seek', function () {
            spyOn(api, 'seekTime');
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onTouchEndScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onTouchEndScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
        });
    });
    describe('onTouchLeaveScrubBar', function () {
        it('should not seek', function () {
            spyOn(api, 'seekTime');
            scrubBar.target = api;
            scrubBar.vgSlider = false;
            scrubBar.onTouchLeaveScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
            scrubBar.vgSlider = true;
            scrubBar.isSeeking = true;
            scrubBar.onTouchLeaveScrubBar({ touches: [{ pageX: 20 }] });
            expect(api.seekTime).toHaveBeenCalledTimes(0);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,